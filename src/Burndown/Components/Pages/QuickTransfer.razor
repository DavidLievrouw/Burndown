@page "/qt"
@using Burndown.Models
@using Burndown.Services

@inject FireflyQueryService FireflyQueryService

<PageTitle>Quick transfer</PageTitle>

<h1 class="page-title">Quick transfer</h1>

<div class="form-container">
    <RadzenAutoComplete @bind-Value="_selectedFromAccount" Data="@_accounts" TextProperty="Name" ValueProperty="Id" Placeholder="From Account" class="input-control" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
    <RadzenAutoComplete @bind-Value="_selectedToAccount" Data="@_accounts" TextProperty="Name" ValueProperty="Id" Placeholder="To Account" class="input-control" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
    <RadzenDatePicker @bind-Value="_selectedDate" DateFormat="yyyy-MM-dd" class="input-control"/>
    <RadzenTextBox @bind-Value="_description" Placeholder="Description" class="input-control"/>
    <RadzenNumeric @bind-Value="_amount" Placeholder="Amount in euro" Format="0.00" class="input-control"/>
    <RadzenButton Text="Submit" Click="OnSubmit" Disabled="@IsSubmitDisabled" class="input-control"/>
    @if (_submittedTransfer != null) {
        <div class="success-message">Transfer '@_submittedTransfer.Description' submitted successfully!</div>
    }
</div>

@code {
    private List<Account> _accounts = new();
    private string? _selectedFromAccount;
    private string? _selectedToAccount;
    private DateTime _selectedDate = DateTime.Now;
    private string? _description;
    private decimal _amount;
    private Models.QuickTransfer? _submittedTransfer;
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        _accounts = (await FireflyQueryService.GetAccounts()).ToList();
    }

    private void OnSubmit() {
        _submittedTransfer = new Models.QuickTransfer {
            FromAccount = _selectedFromAccount!,
            ToAccount = _selectedToAccount!,
            Date = _selectedDate,
            Description = _description!,
            Amount = _amount
        };
        _description = string.Empty;
        _amount = 0;
    }

    private bool IsSubmitDisabled => string.IsNullOrEmpty(_selectedFromAccount) || 
                                     string.IsNullOrEmpty(_selectedToAccount) || 
                                     string.IsNullOrEmpty(_description) || 
                                     _amount <= 0;
}
@page "/"
@using Burndown.Models
@using Burndown.Services
@using System.Globalization

@inject FireflyQueryService FireflyQueryService
@inject DataProcessor DataProcessor
@inject AuthorizationService AuthorizationService
@inject NavigationManager NavigationManager

<div>
    @if (IsLoading) {
        <div class="loading-overlay">
            <div class="spinner"></div>
        </div>
    }
    <div class="row header">
        <div class="col-md-3" style="display: flex; flex-direction: row; align-items: center; gap: 10px;">
            <label style="min-width: 120px;">Select a month:</label>
            <RadzenButton Click="@(args => DecreaseMonth())" Text=" < " Disabled="@(SelectedMonth <= MinDate)" ButtonStyle="ButtonStyle.Light"/>
            <RadzenDatePicker
                @bind-Value="SelectedMonth"
                style="min-width: 116px;"
                TValue="DateTime"
                ShowDays="false"
                DateFormat="yyyy/MM"
                CurrentDateChanged="@OnCurrentDateChanged"
                Min="@MinDate"
                Max="@MaxDate"/>
            <RadzenButton Click="@(args => IncreaseMonth())" Text=" > " Disabled="@(SelectedMonth >= MaxDate)" ButtonStyle="ButtonStyle.Light"/>
        </div>
        <div class="col-md-9" style="display: flex; align-items: center; justify-content: end; gap: 20px;">
            <label>Budget from previous month:</label>
            <RadzenNumeric
                TValue="decimal"
                Culture="@CultureInfo.GetCultureInfo("nl-BE")"
                style="--rz-input-font-size: 1.5rem"
                Format="c"
                Value="@PreviousMonthBudget"
                min="@(0m)"
                max="@(15000m)"
                ValueChanged="OnBudgetChanged"/>
            <label>Total income:</label>
            <h4>@(IncomeOfPreviousMonth.ToString("C", new CultureInfo("nl-BE")))</h4>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <RadzenDataGrid
                @ref="DataGrid"
                Style="font-family: 'JetBrains Mono', 'Consolas', 'Helvetica Neue', Helvetica, Arial, sans-serif"
                AllowSorting="true"
                Data="@Days"
                TItem="DayToRender"
                Density="Density.Compact"
                GridLines="DataGridGridLines.Both"
                SelectionMode="DataGridSelectionMode.Single"
                RowSelect="@RowSelect"
                CellRender="@CellRender">
                <Columns>
                    <RadzenDataGridColumn TItem="DayToRender" Property="Date" Title="Date" Sortable="true" Width="200px">
                        <Template Context="day">
                            @day.Date.ToString("ddd d MMM yyyy")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DayToRender" Property="Description" Title="Description" Sortable="true" Width="auto"/>
                    <RadzenDataGridColumn TItem="DayToRender" Property="Amount" Title="Amount" Sortable="true" Width="200px">
                        <Template Context="day">
                            <div style="background: @day.AmountColor;">
                                @string.Format(new CultureInfo("nl-BE"), "{0:C}", day.Amount)
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DayToRender" Property="RunningTotal" Title="Total" Sortable="false" Width="200px">
                        <Template Context="day">
                            @string.Format(new CultureInfo("nl-BE"), "{0:C}", day.RunningTotal)
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DayToRender" Property="Budget" Title="Budget" Sortable="false" Width="200px">
                        <Template Context="day">
                            @string.Format(new CultureInfo("nl-BE"), "{0:C}", day.Budget)
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DayToRender" Property="PerDay" Title="Per day" Sortable="false" Width="200px">
                        <Template Context="day">
                            <div style="background: @day.PerDayColor;">
                                @string.Format(new CultureInfo("nl-BE"), "{0:C}", day.PerDay)
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
</div>


@code {
    private DateTime MinDate { get; } = new(2023, 12, 1);
    private DateTime MaxDate { get; } = new(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1);

    private bool IsLoading { get; set; } = true;
    private DateTime SelectedMonth { get; set; } = new(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1);
    private decimal IncomeOfPreviousMonth { get; set; }
    private decimal MonthlyInstallments { get; set; }
    private IList<Expense> Expenses { get; set; } = new List<Expense>();
    private IList<DayToRender> Days { get; set; } = new List<DayToRender>();
    private decimal PreviousMonthBudget { get; set; }
    private RadzenDataGrid<DayToRender>? DataGrid { get; set; }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        if (!AuthorizationService.HasToken()) {
            // Redirect to the sign-in page
            var state = Guid.NewGuid().ToString("N");
            var signInUrl = AuthorizationService.GetSignInUrl(state);
            NavigationManager.NavigateTo(signInUrl.AbsoluteUri, true);
        }

        await Reload();
    }

    async Task OnCurrentDateChanged(DateTime args) {
        var newDate = new DateTime(args.Year, args.Month, 1);
        if (newDate < MinDate || newDate > MaxDate) {
            return;
        }

        SelectedMonth = newDate;
        PreviousMonthBudget = default;

        await Reload();
    }

    private async Task Reload() {
        IsLoading = true;

        IncomeOfPreviousMonth = await FireflyQueryService.GetIncomeOfPreviousMonth(SelectedMonth);
        MonthlyInstallments = await FireflyQueryService.GetMonthlyInstallmentsAmountOfPreviousMonth(SelectedMonth);
        Expenses = await FireflyQueryService.GetExpenses(SelectedMonth);

        if (PreviousMonthBudget < 1) {
            PreviousMonthBudget = IncomeOfPreviousMonth - MonthlyInstallments;
        }
        Days = DataProcessor.GetGridData(SelectedMonth, PreviousMonthBudget, Expenses);

        IsLoading = false;
    }

    async Task DecreaseMonth() {
        var newDate = SelectedMonth.AddMonths(-1);
        PreviousMonthBudget = default;
        await OnCurrentDateChanged(newDate);
    }

    async Task IncreaseMonth() {
        var newDate = SelectedMonth.AddMonths(1);
        PreviousMonthBudget = default;
        await OnCurrentDateChanged(newDate);
    }

    async Task OnBudgetChanged(decimal newBudget) {
        PreviousMonthBudget = newBudget;
        await Reload();
    }

    void RowSelect(DayToRender obj) {
        // Do not allow selection
        DataGrid?.SelectRow(null!, raiseEvent: false);
    }

    static void CellRender(DataGridCellRenderEventArgs<DayToRender> obj) {
        if (obj.Data.Date.DayOfWeek == DayOfWeek.Saturday || obj.Data.Date.DayOfWeek == DayOfWeek.Sunday) {
            obj.Attributes["style"] = "background-color: #eaeaea;";
        }
    }
}
@page "/qe"
@using Burndown.Models
@using Burndown.Services

@inject FireflyQueryService FireflyQueryService
@inject ExpenseService ExpenseService

<PageTitle>Quick expense</PageTitle>

<h1 class="page-title">Quick expense</h1>

<div class="form-container">
    <RadzenDropDown @bind-Value="_selectedSourceAccount"
                    class="input-control"
                    FilterDelay="100" 
                    Data="_accounts" 
                    TextProperty="@nameof(Account.Name)" 
                    ValueProperty="@nameof(Account.Id)" 
                    Placeholder="Select Source Account" 
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    FilterOperator="StringFilterOperator.Contains" 
                    AllowFiltering="true"
                    AllowClear="true" />
    <RadzenDatePicker @bind-Value="_selectedDate" DateFormat="yyyy-MM-dd" class="input-control"/>
    <RadzenTextBox @bind-Value="_description" Placeholder="Description" class="input-control"/>
    <RadzenNumeric @bind-Value="_amount" Placeholder="Amount in euro" Format="0.00" class="input-control"/>
    <RadzenDropDown @bind-Value="_selectedCategory" Data="@_categories" Placeholder="Select Category" class="input-control"/>
    <RadzenRadioButtonList TValue="string" @bind-Value="_selectedTarget" Data="@_targets"/>
    <RadzenButton Text="Submit" Click="OnSubmit" Disabled="@IsSubmitDisabled" class="input-control"/>
    @if (_submittedExpense != null) {
        <div class="success-message">Expense '@_submittedExpense.Description' submitted successfully!</div>
    }
</div>

@code {
    private List<Account> _accounts = new();
    private string? _selectedSourceAccount;
    private DateTime _selectedDate = DateTime.Now;
    private string? _description;
    private decimal _amount;
    private string? _selectedCategory;
    private readonly List<string> _categories = ["Leven", "Nodig", "Optioneel", "Folietjes"];
    private string? _selectedTarget;
    private readonly List<string> _targets = ["SharedDavid", "SharedTina", "Tina", "David", "Settled"];
    private Models.QuickExpense? _submittedExpense;
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        _accounts = (await FireflyQueryService.GetAccounts())
            .OrderBy(a => a.Name)
            .ToList();
    }

    private async Task OnSubmit() {
        _submittedExpense = new Models.QuickExpense {
            Account = _selectedSourceAccount!,
            Date = _selectedDate,
            Description = _description!,
            Amount = _amount,
            Category = _selectedCategory!,
            Target = _selectedTarget!
        };
        await ExpenseService.AddQuickExpense(_submittedExpense);
        _description = string.Empty;
        _amount = 0;
    }

    private bool IsSubmitDisabled => string.IsNullOrEmpty(_selectedSourceAccount) || 
                                     string.IsNullOrEmpty(_description) || 
                                     _amount <= 0 || 
                                     string.IsNullOrEmpty(_selectedCategory) || 
                                     string.IsNullOrEmpty(_selectedTarget);
}